name: Code Scans with SFDX Scanner

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - integration
    paths:
      - "force-app/main/default/classes/**"
      - "force-app/main/default/lwc/**"
      - "force-app/main/default/aura/**"
      - "force-app/main/default/triggers/**"
      - "force-app/main/default/components/**"

jobs:
  code-scan:
    runs-on: ubuntu-latest
    name: "Code Scan"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # No more references
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: |
            node_modules
            ~/.cache/sf/yarn
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies and copy config files and rules
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: |
          npm ci --prefer-offline --no-audit
        shell: bash

      - name: Copy config files and rules only
        if: steps.cache-nodemodules.outputs.cache-hit == 'true'
        run: |
          npm run postinstall
        shell: bash

      - name: Install SF CLI and SFDX Scanner Plugin
        run: |
          npm install @salesforce/cli --location=global
          sf plugins install @salesforce/sfdx-scanner@3.26.0
        shell: bash

      - name: "Fetch all Files and prepare scan"
        run: |
          git fetch --all
          node .ci/prepare-scan.js

      - name: "Populate auth file and log in to Org"
        run: |
          echo ${{ secrets.INTEGRATION_SANDBOX_SFDX_URL}} > ./INTEGRATION_SANDBOX_SFDX_URL.auth
          sf org login sfdx-url --sfdx-url-file ./INTEGRATION_SANDBOX_SFDX_URL.auth --alias integration_sandbox --set-default

      - name: "Run Legacy Scan on modified legacy files"
        run: |
          sf scanner run --target ./legacy-metadata/ --engine "pmd,eslint-lwc,retire-js" --category "Security,Performance,problem,Insecure Dependencies" --outfile "legacy-scan-results.json" --format json --normalize-severity

      - name: "Parse Legacy Scan Results and Upload to Org"
        run: |
          node .ci/parse-scan-results.js legacy-scan-results.json legacy-scan-results.csv

      - name: "Store Legacy Scan Results on GitHub"
        uses: actions/upload-artifact@v3
        with:
          name: legacy-scan-results
          path: legacy-scan-results.csv

      - name: "Run Strict Scan on non legacy files"
        run: |
          sf scanner run --target ./force-app/ --severity-threshold 3 --outfile "scan-results.json" --format json --normalize-severity

      - name: "Handle Scan Results for non legacy files"
        if: failure()
        run: |
          node .ci/parse-scan-results.js

  lwc-jest:
    runs-on: ubuntu-latest
    name: "LWC Tests"
    steps:
      - uses: actions/checkout@v4

      # No more references
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: |
            node_modules
            ~/.cache/sf/yarn
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies and copy config files and rules
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: |
          npm ci --prefer-offline --no-audit
        shell: bash

      - name: Copy config files and rules only
        if: steps.cache-nodemodules.outputs.cache-hit == 'true'
        run: |
          npm run postinstall
        shell: bash

      - name: Install SF CLI and SFDX Scanner Plugin
        run: |
          npm install @salesforce/cli --location=global
          sf plugins install @salesforce/sfdx-scanner@3.26.0
        shell: bash

      - name: Run sfdx-lwc-jest
        run: |
          npm run test
